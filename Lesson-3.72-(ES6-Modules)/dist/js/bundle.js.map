{"version":3,"sources":["webpack://food/./src/js/main.js","webpack://food/webpack/bootstrap","webpack://food/webpack/runtime/define property getters","webpack://food/webpack/runtime/hasOwnProperty shorthand","webpack://food/webpack/runtime/make namespace object","webpack://food/./src/js/script.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;AACO;;;AAGP;AACA;;AAEa;;AAEN;AACP;AACA;;AAEO;;AAEA;;AAEA;;;AAGP;AACe;AACf;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS,e;;;;;;UCzCnB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;ACNmC;;AAEnC,eAAe,yCAAG,CAAC,OAAO,yCAAG,CAAC;;;AAG9B;AACA;AACA;AAC2C;;AAE3C,YAAY,2CAAK;;;AAGjB;AAC+B;AAC/B;AACA,eAAe,yCAAQ,CAAC,OAAO,yCAAQ,CAAC;AACxC;;AAEA,YAAY,qCAAI;;;;AAIhB;AAC+B;AAC/B,iDAAM,G","file":"bundle.js","sourcesContent":["// новая более гибкая модульная структура es6 стандарта\r\n\r\n// самое важное в таких экспортах, чтобы у каждой было своё имя (именованный экспорт)\r\n\r\n// можно так\r\nexport let one = 1;\r\n\r\n\r\n//можно так\r\nlet two = 2;\r\n\r\nexport {two};\r\n\r\nexport function sayHi() {\r\n\tconsole.log('Hello');\r\n}\r\n\r\nexport let three = 3;\r\n\r\nexport let four = 4;\r\n\r\nexport let five = 5;\r\n\r\n\r\n// есть ещё такая штука, как экспорт по умолчанию. Он может быть только один\r\nexport default function sayBye() {\r\n\tconsole.log('Bye');\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n// Редкая штука\r\n// ещё есть такая фича - тайпМодуль, который мы можем применить к тайпу Скрипт. Т.е. это как без билда подключать наши модули(вдруг пригодится). \r\n\r\n// сделаем в нашем файде хтмл так\r\n// \t< script type = \"module\" src = \"./js/main.js\" ></ >\r\n// \t\t<script type=\"module\" src=\"./js/script.js\"></script>\r\n// это не значит, что наш браузер соберет скрипты, напомню, что он это делать не умеет, он просто последовательно их подключит.\r\n// стоит понимать, что когда мы подключаем скрипты через type=module, они работают так как defer\r\n// и плюс к этому всему нужно немного точнее прописывать пути в наших импортах\r\n// вот так\r\n//import {one, two} from './main';","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {one, two} from './main.js';\r\n\r\nconsole.log(`${one} and ${two}`);\r\n\r\n\r\n// мы прям тут можем вот что сделать\r\n// т.е. мы тут переименовываем\r\n// такое используют часто когда используют длинное название и нам его просто надо переименовтаь\r\nimport { three as third } from './main.js';\r\n\r\nconsole.log(third);\r\n\r\n\r\n// ещё одна плюшка это импортировать всё\r\nimport * as data from './main';\r\n// тут мы всему дали название data, и теперь можем так обращаться\r\nconsole.log(`${data.one} and ${data.two}`);\r\n// т.е. в даном случае data это по сути объект в котором всё, что было экспортировано \r\n\r\nconsole.log(data);\r\n\r\n\r\n\r\n// про экспорт по умолчанию\r\nimport sayBye from './main.js';\r\nsayBye();"],"sourceRoot":""}