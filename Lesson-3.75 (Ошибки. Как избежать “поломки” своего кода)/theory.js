'use scrict';

// спец конструкция, чтобы обрабатывать ошибки, и наш код не падал

// в try ставим действие, которое хотим выполнить
// если в блоке try всё выполняется, то в catch не идёт, если не выполнится, то пойдёт в catch

try {
	console.log('normal');
} catch(e) {
	console.log('error');
}

// очень важно, что код после try, catch продолжит работать, скрипт не полаемается. А без try,catch напомню, что если будет ошибка, то код остановится и дальше не пойдёт
console.log('still normal');



// ---------------------------------------
//попробуем поламать код
try {
	console.log('normal');
	console.log(a); // выводим переменную, которой не существет
} catch (e) {
	console.log('error');
}

console.log('still normal');

// -----------------------------------------
try {
	console.log('normal');
	console.log(a);
} catch (error) {
	console.log(error); // посмотрим, что внутри этого объекта. там лежат ошибкт
	//можно посмотреть отдельные свойства ошибки
	console.log(error.name);
	console.log(error.message);
	console.log(error.stack);
} finally { // это завершает наш код при любом исходе

}

console.log('still normal');

// -----------------------------------------
// -----------------------------------------
// -----------------------------------------
// -----------------------------------------
// -----------------------------------------
// Очень часто один и тот же скрипт мы подключаем к множеству страниц, да, но если мы с помощью дома ищем элементы страницы, то на одном html файле он есть (этот элемент), а на другом html его может ее быть. А js мы подключаем один и туда и туда. Что же делать? как разрабатывать тогда многостраничные сайты? Ответ кроется в конструкции try/catch. В папке practice можно посомтреть решение. 
