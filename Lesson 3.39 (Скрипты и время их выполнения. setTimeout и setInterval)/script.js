const timeId = setTimeout(function () {
  console.log('Hi');
}, 1000); // функция, которая запускается через промежуток времени. она вызовется через то время, которые мы укажем вторым аргументом. Время указываем в формате милисекунд. 1 сек = 1000 милисек. В данном случаем функция запустится через 2 сек.

// Передадим наш текст в аргумент
const timeId2 = setTimeout(function (text) {
  console.log(text);
}, 2000, 'Hello');

// можно передать не анонимную функцию, а создать её и передать
const timeId3 = setTimeout(logger, 3000); 

function logger() {
  console.log('text');
}

// вообще можно не запихивать сетТаймаут в переменную, но лучше запихнуть, для того чтобы чётко определять наши сетТаймауты, т.к. их мб оч много. + мы можем удалить индификатор таймера задав в аргумент clearInterval переменную с нужным сетТаймаутом:
const timeId4 = setTimeout(logger, 3000);

clearInterval(timeId4);

function logger() {
  console.log('text');
}


// // Поработаем с нашией структурой хтмл ------------------------------------------------------------------------------------------------------------------------------------------
// метод setInterval такой же как и setTimeout, только будет работать через интервал
const btn = document.querySelector('.btn');
let timeId5; // объяснение для чего тишем это в строке 36
    i = 0 // это пишем для того чтобы работал наш клеар интервал
btn.addEventListener('click', () => {
  timeId5 = setInterval(logger2, 1000); 
});

clearInterval(timeId5); // но клиар не выполнется если константку timeId4 заранее не задать, выше функции, т.к. константа объявленная в функции не видна за пределами этой функции. Поэтому обязательно в нашем случае создаём и обязательно не const, а let, т.к. будем менять её. 
// но есть одна штука. Он всё ранво не работает:), он идёт в потоке синхронного когда
// исправляем это. Клиар интервал выше нам не нужен, мы в функции логер делаем условие
function logger2() {
  if(i === 3) {
    clearInterval(timeId5);
  }
  console.log('text');
  i++;
}


// ------------------------------------------------------------------------------------------------------------------------------------------
// Теория вопрос!!! 
// Чем рекурсивный сетТаймаут лушче чем сетИнтервал???
// setInterval(logger, 1000) - в данном примере мы предполагаем, что сначала пройдёт секунда и запустится логер, потом ещё секунда - логер, и тд. НО! Если предположим, что логер это большая и тяжёлая функция, и она будет длиться 3 сек, то сет интервал после не будет ждать 1 сек, а будет выполнять сразу, считая, что 1 сек уже прошла.
// поэтому рекурсивный сетТаймаут лучше бывает. Рассмотрим пример:

// это рекурсивный сетТаймаут
// let id = setTimeout (function log() {
//   console.log('Hello');
//   id = setTimeout(log, 500);
// }, 500);


// ------------------------------------------------------------------------------------------------------------------------------------------
// оживим нашу страничку хтмл

const btn2 = document.querySelector('.btn-2');

function myAnimation() {
  const elem = document.querySelector('.box');
  let position = 0;

  const id = setInterval(frame, 10);
  function frame() {
    if (position == 300) {
      clearInterval(id);
    } else {
      position ++;
      elem.style.top = position + 'px';
      elem.style.left = position + 'px';
    }
  }
}

btn2.addEventListener('click', myAnimation);