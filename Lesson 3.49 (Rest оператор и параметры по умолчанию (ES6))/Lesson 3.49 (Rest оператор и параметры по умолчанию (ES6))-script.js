// 'use strict'; 

const log = function(a, b, ...rest) { // допустим, у нас есть два обязательных аргумента, а дальше мы не знаем будут ли они, и сколько их будет, если вообще будут. Для этого топератор ....rest. Он всегда записывается в конце. при этом сам оператор это три точки, а название после может быть любым
	console.log(a, b, rest);
}

log('basic', 'rest', 'operator', 'usage'); 
// basic rest [ 'operator', 'usage' ] мы получим обязательные аргументы просто, а остальные в массиве. Т.е. rest собирает в массив.



// Параметры по умолчанию - это для того, чтобы если не передан один из аргументов, чтобы он подставлялся автоматически. 

// До ES6 делали так!!!

function calcOrDouble(number, basis) {
	basis = basis || 2; //если basis не передан, значит он undefined. По логическому контексту он превращается в false. и false || 2, вернёт 2.
	console.log(number * basis);
}

calcOrDouble(3);


// с приходом ES6 пришло следующее. Современный и надёжный вариант:
function calcOrDouble2(number, basis = 2) {
	console.log(number * basis);
}

calcOrDouble2(3);

// далее переходим к практике. заходим в соответствующую папку. Там мы с помощью оператора rest делаем так, что бы можно было добавить класс нашей каротчке для стилизации.