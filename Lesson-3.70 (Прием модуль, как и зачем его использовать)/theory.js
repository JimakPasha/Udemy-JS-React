// Приём модуль.
// Он служит для того, чтобы скрыть внутренние детали реализации скрипта

// Приемущество модулей. 
// 1) Они самодостаточные и независимые. Хорошо разработанный модуль не зависит от другого кода и может быть измнён или удалён
// 2) Обеспечивают частоту глобального пространства. Т.е. когда мы создаём скрипт и переменные, то они заносятся в глобальную область видимости. Делать это не рекомендуется. Глобальных переменных должно быть как можно меньше. Модули позволяют избежать загрязнения глобального пространства и избежать конфликтов с одинаковыми именами переменных.

// Пример этого. Мы подключаем сторонюю библиотеку в которой уже созданна глобальная переменная например с названием app, а потом мы в своём файле скрипт, создаём тоже переменную app, и у нас будет ошибка

//Два способа создания модулей

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 1) С помощью анонимной самовызывающейся функцией (Immediately-Invoked Function Expression или IIFE)
'use strict';
const number = 1;
// ананимная - потому что у неё нет имени
// самовызывающяяся - т.к. после того, как она объявлена, она сразу же вызывает себя на месте.
// мы её помещаем в скобки, зачем? Без скобак мы получаем фанкшн-декларейшн и ошибку, т.к. она не может быть ананимной. А со скобкой она экспрешен.

// с помощью такой функции мы можем создать собственную область видимости
(function() {
	let number = 2;
	console.log(number); // 2
	console.log(number + 3); // 5
}());
// получается мы создали модуль, со своей областью видимости

console.log(number); // тут обращаемся к глобальной области видимости и получим 1

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 2) Теперь про модули с помощью объектного интерфейса
// мы записываем модуль в переменную и в неё возращаем методы доступные снаружи

const user = (function() {
	let privat = function() {
		console.log('I am privat!'); // тут мы понимаем, что доступа к этой функции не имеем, т.к. она лежит внутри локальной области видимости, но...
	};
	// ... но мы можем использовать объектный интерфейс. когда из этой анонимной функции мы возвращаем объект
	return {
		sayHello: privat
	};
}());

user.sayHello();
// по простому наша анонимная самовызывающаяся функция создаёт объект и экспортирует те методы и свойства, которые нам действительно нужны будут снаружи.

// С классами работает всё также
