'use strict';

const inputRub = document.querySelector('#rub'),
			inputUsd = document.querySelector('#usd');

inputRub.addEventListener('input', () => { // слушатель событий инпут работает, как только мы ввели или удалили какой-либо символ в инпуте. еще бывает change, он похож, но срабатывает тогда, когда мы убрали фокус из инпута
	const request = new XMLHttpRequest(); // нам нужно сделать запрос на сервер и мы используем встроенный в браузер XMLHttpRequest. Не так часто встречается в новом коде. и Мы создали объект. У него есть свои методы, свойства и тд.

	// Рассмотрим и используем методы:
	// request.open(method, url, async, login, pass); // этот метод не открывает, а собирает настройки, которые помогут нам в будущем сделать запрос. Open в себе может содержать следующие аргументы: 1) method, который используется в гет и пост запросах. 2) url путь формируем относительно html 3) Асинхронность(по умолчанию). AJAX вообще асинхронный(это значит что код выполняется не дожидаясь чего-то, он сам по себе) 4)5) лог и пароль.
	request.open('GET', 'js/current.json');
	request.setRequestHeader('Content-type', 'application/json; charset=utf-8'); // тут данный метод отвечает за то, что именно мы передаём. Это нужно чтобы наши трансферные протоколы чётко знали, что передают и чтобы сервер знал, что он принимает в себя. Для этого сущетвуют http заголовки.
	request.send(); // метод отправки запроса. Если мы используем POST-запрос, то в аргументе мы указываем, что уходит в запрос. А в GET - оставляем без аргумента.

	// СВОЙСТВА этого объекта:
	// status - статус запроса. это код ошибки или успеха
	// statusText - текстовый ответ
	// respons - ответ. Ответ который задал бэк-разраб
	// readyState - текущее состояние нашего запроса

	// СОБЫТИЯ этого объекта:
	// существует много, но на практике больше используются следующие два: 
	// readystatechange - отслеживает статус готовности нашего запроса в текущий момент
	// load - когда закгрузился и получили результат

	request.addEventListener('load', () => {
		if (request.status === 200) {
			console.log(request.response);
			const data = JSON.parse(request.response); // парсим(превращаем в понятный объект, то, что мы получаем с сервера)
			inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); // toFixed - округляет, до 2-ух знаков после точки
		} else { // обязательно пишите, условие если что-то пошло не так!!! юзер должен знать иначе он будет без конца ждать ответа!!!
			inputUsd.value = "Что-то пошло не так, попробуйте ещё раз";
		}
	});




});