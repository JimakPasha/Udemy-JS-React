// ClassList и делегирование событий


const btns = document.querySelectorAll('button');

console.log(btns[0].classList.length); // так можно узнать колличество классов у элемента

console.log(btns[0].classList.item(1)); // item позваляет получить класс, который располагается под определённым индексом. Индекс который хотим получить пишем в аргументе item
console.log(btns[0].classList.add('red')); // добавляет класс. Можно в аргумент писать сразу несколько классов
console.log(btns[0].classList.remove('blue')); // удаляет класс
console.log(btns[0].classList.toggle('blue')); // есть блу есть он удалиться, если нет то появится (toggle - переключать)

if (btns[1].classList.contains('red')) { // метод contains проверяет есть ли такой класс, и в значение мы полуаем тру или фолс
  console.log('red'); // тут ничего не выводится, так как у btns[1] этого класса нет
}



// ---------------------------------------------
// всё это даёт нам широкие возможности в заимодействии с элементами

btns[0].addEventListener('click', () => {
  // if (!btns[1].clsssList.contains('red')) {
  //   btns[1].clssList.add('red');
  // } else {
  //   btns[1].clssList.remove('red');
  // } // но это всё можно заменить одним свойством toggle
  btns[1].classList.toggle('red');
});

// Есть устаревшее свойство. Его не использовать лучше, но встречать возможно придётся
console.log(btns[0].className); // мы получим классы первой строчки в виде строки




// ------------------------------------------------------------------------------------------------------------------------
// ДЕЛИГИРОВАНИЕ СОБЫТИЙ
// когда мы не задаём слушатель событий на конкретную кнопку, а задём его родителю

const wrapper = document.querySelector('.btn-block');

wrapper.addEventListener('click', (event) => {
  // console.dir(event.target); // можем посмотреть всю информацию, которая есть у конкретного дом узла
  if (event.target && event.target.tagName == 'BUTTON') {
    // надо удостоверится что мы точно кликнули в кнопку. а зачем мы прописали просто event.target?? Дело в том что в штмл структуре не все элементы поддерживают события клика, существуют некоторые теги, на которые просто невозможно кликнуть и у них просто не будет event.target (например тег который делает переносы), и чтобы скрипт отрабатывал, мы проверяем на ивент таргет.
    console.log('Hello');
  }
})

// wrapper.addEventListener('click', (event) => {
//   console.dir(event.target); // можем посмотреть всю информацию, которая есть у конкретного дом узла
//   if (event.target && event.target.classList.contains('blue')) { // тут мы проверили на класс блу, у тех которых есть класс блу, будут выводить нам в консоле Hello
//     console.log('Hello');
//   }
// })




// займёмся созданием динамического контента на странице
const btn = document.createElement('button');
btn.classList.add('red');
wrapper.append(btn);
// мы создали кнопку, дали ей класс, и запихнули в конец врапера. При клике на эту кнопку происходит тоже, что и с кнопками предыдущими


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// мы можем обработчик событий назначить, только при помощи метода перебора
// btns.forEach(btn => {
//   btn.addEventListener('click', () => {
//     console.log('HELLO-2!');
//   })
// });

// затем создаём кнопку динамически, как делали это выше

// const btn = document.createElement('button');
// btn.classList.add('red');
// wrapper.append(btn);
// а теперь при клике на динамически созданную кнопкку ничего динамически не происходит. Потому что эта кнопка ничего не знает, про обработчик события, который был добавлен до этого. Это типичный пример ошибки, который мб.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// сотрудники гугла любят matches(); это с чем сравниваем - это и напишем в аргумент(с чем будем сравнивать). 
// Или такое пояснение -> Метод Element.matches() вернёт true или false, в зависимости от того, соответствует ли элемент указанному css-селектору. Результат выполнения - true или false.

// wrapper.addEventListener('click', (event) => {
//   if (event.target && event.target.matches(button.red)) {
//     console.log('Hello');
//   }
// })