'use strict';

// ООП наука о том, как делать правильную архитектуру
// Когда-то писали всё одними функциями
// По сути всё является объектом
// Но когда мы пишем строку в кавычках, то она действительно прмитивный тип данных, как только мы применяем к ней метод, то js оборачивает её в объект, а потом нам возвращает обратно примитив 

let str = 'some';
let strObj = new String(str); // таким способом (так обычно не делают, это нам для примера) можно сделать строку

console.log(typeof(str));
console.log(typeof (strObj)); // сначала мы получили строку, а потом объект, примерно так происходит, когда мы используем какой-то метод на строке. Т.е. он оборачивает строку в какой-то объект, потом использует какой-то метод, а потом возвращает всё обратно



console.dir([1, 2, 3]); // можем посмотреть, что наш массив имеет прототип, а он объект (смотреть в консоли браузера)


const soldier = {
  health: 400,
  armor: 100,
  sayHello: function() {
    console.log('Hello!');
  }
};

const john = {
  health: 100
};

// и нам нужно устоновоить связь между джоном и солдатом, чтобы у него были все свойства как у солдата, но есть своя особенность - здоровье не 400, а 100. 

// И есть устаревший (deprecated - устарел) способ это сделать, его теперь в новом коде лучше не делать, но он будет часто встречаться, и его нужно понимать

john.__proto__ = soldier;

console.log(john); // и тут выведет консоль нам просто health 100, будто у него ничего и нет другого, НО...

console.log(john.armor); // ... НО если написать так, то у него и броня есть, и это мы получаем благодаря прототипу

john.sayHello();


// И теперь способ новый, который нужно использовать

Object.setPrototypeOf(john, soldier); //в аргументе первый которму надо назначить прототип. Это идентично этой записи john.__proto__ = soldier;



// ------------------------------------------------------
// Единсвенное, что в коде чуть чаще встречается другой порядок создания этого всего. Порядок следующий

const soldier2 = {
  health: 400,
  armor: 100,
  sayHello: function () {
    console.log('Hello!');
  }
};

const john2 = Object.create(soldier2); // т.е. мы создаём новый объект джон2, который будет прототипно тнаследоваться от солдата




// !!!!!!!!!!!!!!!!!!Самое важное из урока!!!!!!!!!!!!!!!!!!
Object.setPrototypeOf();
const x = Object.create();
x.__proto__ = y; // встречается, но уже не используется
