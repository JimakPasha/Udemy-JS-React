* это просто текстовой документ - конспект, без возможности кода


Мы будем говоритть про загрузку скриптов на страницу, как можно её оптимизировать и как правильно это делать

------------------------------------------------------
- Повторим прописные истины (как загружается страница):
Когда index.html попоадает в браузер он иницилизирует страницу html и смотрит что хтмл с определённым языком, дальше загружает хэд - метатэги, тайтл, дальше подключает стили. Затем бади и строит вёрстку тег за тегом, дальше скрипт.



------------------------------------------------------
- Почему мы скрипт ставим в конце, а не в начале?
Если поставим в начале там где наши стили: две проблемы будет: 1) если в скрипте будет взаимодействие с элементами в нашем ДОМ дереве, которые ещё естественно не загрузились, то будет ошибка, т.к. скрипт их просто не обнаружит. Частично решается с помощью DOMContentLoaded 2) при загрузке наш скрипт блокирует страницу (если скрипт объёмный или сервер, где лежит скрипт подвисает, то страница дальше не будет грузится). Эта проблема не решается.

- Но есть проблемка, если писать скрипт в самом конце.
Он возникает на очень больших проектах, и если у пользователя при этом медленный интернет
Решение: Мы можем писать скрипт в начале, после стилей с атрибутом defer(перевод - откладывать).



------------------DEFER------------------
- Что нам даёт defer? 
1) Этот атрибут сообщает браузеру, что он должен продолжать обрабатывать страницу и прогружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он прогрузится.
Скрипты с defer никогда не блокируют страницу.
2) Скрипты с defer выполняются (не путать с загружаются), когда наше DOM дерево уже готово, поэтому скрипт и видит всю структуру ДОМ и может взаимодействовать с элементами ДОМ.
Если у нас подключено несколько сриптов с этим атрибутом, то они будут подключаться как и обычно, последовательно, один за другим.
!!!НО!!! Гугл спид всё равно будет ругаться на подключение скриптов в начале и будет просить переместить из вниз. Так что это не всегда актуально



------------------ASYNC------------------
- Его особенности
1) Страница не ждёт этих async - асинхронных скриптов. Содержимое просто обрабатывается и отображается.
2) События DOMContentLoaded скрипт async не ждут друг друга. Скрипт запускается сразу, как только был загружен он вообще никого не ждёт.
3) И другие срипты не ждут скрипт с async, и он их не ждёт. Он вообще независим.
- Для чего это нужно? Загружать сторонние скрипты, которые не взаимодействуют с нашим DOM. Например всякие подключение метрик, счётчиков.
!!!Важно!!! Когда мы подключаем скрипт async мы должны быть уверены, что он не взаимодействует с нашим DOM деревом. И он не должен быть зависим от других скриптов




-------------------------------------------
- Ещё один способ. Динамическая подгрузка скриптов.
С помощью создание тега в самом скрипте.
В файле js пишем:
const script = document.createElement('script');
script.src = 'js/test.js';
document.body.append(script); // добавляем его на страницу. append поместит элемент в конец бади
Тут скрипт будет загружаться, только после того, как будет добавлен в документ.
Стоит учесть, что такой способ будет вести себя как с атрибутом async.
Но можно это поменять, добавив script.async = false; и наш скрипт будет подгружаться как без async.
const script = document.createElement('script');
script.src = 'js/test.js';
script.async = false;
document.body.append(script);

можно это конечно всё запихивать в функции

function loadScript(src) {
  const script = document.createElement('script');
  script.src = src;
  script.async = false;
  document.body.append(script);
}

loadScript('js/test.js');
loadScript('js/test2.js');

тут из - за того что мы установили script.async = false; они будут выполняться строго друг за другом.